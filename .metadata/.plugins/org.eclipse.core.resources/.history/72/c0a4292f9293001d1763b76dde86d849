package com.technicalTest.springboot.app.chores.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import com.technicalTest.springboot.app.chores.dto.ErrorChoresDto;

@RestControllerAdvice
public class ControllerAdvice {
	
	@ResponseStatus(code= HttpStatus.BAD_REQUEST)
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public Map<String, String> handlevalidateExceptions(MethodArgumentNotValidException ex){
		Map<String, String> errors = new HashMap<String, String>();
		ex.getBindingResult().getAllErrors().forEach((error) -> {
			String fieldName= ((FieldError) error).getField();
			String message= error.getDefaultMessage();
			
			errors.put(fieldName, message);
		});
		
		return errors;
	}
	
	@ExceptionHandler(value= RuntimeException.class)
	public ResponseEntity<ErrorChoresDto> runtimeExceptionHandler(RuntimeException ex){
		ErrorChoresDto error= ErrorChoresDto.builder().code("P-404").message("Chores does not exist").build();
		return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
	}
	
	@ExceptionHandler(value= RuntimeException.class)
	public ResponseEntity<ErrorChoresDto> runtimeEExceptionHandler(RuntimeException ex){
		ErrorChoresDto error= ErrorChoresDto.builder().code("P-500").message(" not exist").build();
		return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
	}
}
